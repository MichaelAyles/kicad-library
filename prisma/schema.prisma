// CircuitSnips Database Schema
// Based on .claude/data-model.md

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // GitHub OAuth Data
  githubId  Int     @unique @map("github_id")
  username  String  @unique
  email     String?
  avatarUrl String? @map("avatar_url")
  profileUrl String? @map("profile_url")
  name      String?

  // Profile
  bio      String?
  website  String?
  location String?

  // Settings
  emailNotifications Boolean @default(true) @map("email_notifications")
  publicProfile      Boolean @default(true) @map("public_profile")

  // Stats
  subcircuitCount        Int      @default(0) @map("subcircuit_count")
  totalCopiesReceived    Int      @default(0) @map("total_copies_received")
  lastLogin              DateTime? @map("last_login")

  // Relations
  subcircuits  Subcircuit[]
  favorites    Favorite[]
  copyEvents   CopyEvent[]
  sessions     Session[]

  @@map("users")
}

model Subcircuit {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Owner
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Identifiers
  slug  String
  title String
  description String?

  // S-Expression Data
  sexprRaw    String @map("sexpr_raw") @db.Text  // Original pasted S-expression
  sexprParsed Json   @map("sexpr_parsed")        // Complete parsed tree
  metadata    Json                                // Extracted metadata

  // Categorization
  tags     String[]
  category String?

  // License
  license      String
  licenseNotes String? @map("license_notes")

  // Rendering
  previewSvg   String? @map("preview_svg") @db.Text
  thumbnailUrl String? @map("thumbnail_url")
  hasPreview   Boolean @default(false) @map("has_preview")

  // Version Info
  kicadVersion  Int?    @map("kicad_version")
  formatVersion String? @map("format_version")

  // Stats
  viewCount     Int @default(0) @map("view_count")
  copyCount     Int @default(0) @map("copy_count")
  favoriteCount Int @default(0) @map("favorite_count")

  // Visibility
  isPublic   Boolean @default(true) @map("is_public")
  isFeatured Boolean @default(false) @map("is_featured")

  publishedAt DateTime? @map("published_at")

  // Relations
  favorites  Favorite[]
  copyEvents CopyEvent[]

  @@unique([userId, slug])
  @@index([userId])
  @@index([slug])
  @@index([category])
  @@index([isPublic])
  @@index([createdAt])
  @@index([copyCount])
  @@map("subcircuits")
}

model Favorite {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")

  userId        String      @map("user_id")
  subcircuitId  String      @map("subcircuit_id")

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  subcircuit  Subcircuit  @relation(fields: [subcircuitId], references: [id], onDelete: Cascade)

  @@unique([userId, subcircuitId])
  @@index([userId])
  @@index([subcircuitId])
  @@map("favorites")
}

model CopyEvent {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")

  subcircuitId String @map("subcircuit_id")
  userId       String? @map("user_id")  // NULL if not logged in
  ipAddress    String? @map("ip_address")
  userAgent    String? @map("user_agent")

  subcircuit Subcircuit @relation(fields: [subcircuitId], references: [id], onDelete: Cascade)
  user       User?      @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([subcircuitId])
  @@index([userId])
  @@index([createdAt])
  @@map("copy_events")
}

// NextAuth.js Session Management
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
